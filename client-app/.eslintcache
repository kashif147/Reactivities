[{"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\index.tsx":"1","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\layout\\NotFound.tsx":"2","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx":"3","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx":"4","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\layout\\ScrollToTop.tsx":"5","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"6","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts":"7","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\models\\activity.ts":"8","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\form\\TextAreaInput.tsx":"9","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\form\\SelectInput.tsx":"10","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\util\\util.ts":"11","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx":"12","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\nav\\NavBar.tsx":"13","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\form\\DateInput.tsx":"14","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"15","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"16","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"17","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\layout\\App.tsx":"18","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"19","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\stores\\userStore.ts":"20","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\user\\LoginForm.tsx":"21","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\api\\agent.ts":"22","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\stores\\commonStore.ts":"23","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\stores\\rootStore.ts":"24","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\stores\\modelStore.ts":"25","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\modals\\ModalContainer.tsx":"26","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\form\\ErrorMessage.tsx":"27","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\user\\RegisterForm.tsx":"28","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItemAttendees.tsx":"29","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedSidebar.tsx":"30","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedHeader.tsx":"31","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\profiles\\ProfilePage.tsx":"32","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\profiles\\ProfileHeader.tsx":"33","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\profiles\\ProfileContent.tsx":"34","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\stores\\profileStore.ts":"35","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\profiles\\ProfilePhotos.tsx":"36","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\photoUpload\\PhotoUploadWidget.tsx":"37","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\photoUpload\\PhotoWidgetDropzone.tsx":"38","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\photoUpload\\PhotoWidgetCropper.tsx":"39","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\options\\categoryOptions.ts":"40","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx":"41","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\form\\TextInput.tsx":"42","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\profiles\\ProfileFollowings.tsx":"43","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\profiles\\ProfileCard.tsx":"44","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityFilters.tsx":"45","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItemPlaceholder.tsx":"46","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\layout\\PrivateRoute.tsx":"47"},{"size":1000,"mtime":1612219125687,"results":"48","hashOfConfig":"49"},{"size":607,"mtime":1564794500000,"results":"50","hashOfConfig":"49"},{"size":1397,"mtime":1564794500000,"results":"51","hashOfConfig":"49"},{"size":1704,"mtime":1612201354210,"results":"52","hashOfConfig":"49"},{"size":300,"mtime":1564794500000,"results":"53","hashOfConfig":"49"},{"size":941,"mtime":1610403775918,"results":"54","hashOfConfig":"49"},{"size":8921,"mtime":1612204413931,"results":"55","hashOfConfig":"49"},{"size":1190,"mtime":1612038703200,"results":"56","hashOfConfig":"49"},{"size":655,"mtime":1609622820609,"results":"57","hashOfConfig":"49"},{"size":819,"mtime":1564794500000,"results":"58","hashOfConfig":"49"},{"size":1090,"mtime":1612203384557,"results":"59","hashOfConfig":"49"},{"size":2312,"mtime":1611607606127,"results":"60","hashOfConfig":"49"},{"size":1590,"mtime":1611606510690,"results":"61","hashOfConfig":"49"},{"size":1006,"mtime":1611699210862,"results":"62","hashOfConfig":"49"},{"size":5299,"mtime":1610293543820,"results":"63","hashOfConfig":"49"},{"size":1479,"mtime":1610901206823,"results":"64","hashOfConfig":"49"},{"size":1595,"mtime":1612137665469,"results":"65","hashOfConfig":"49"},{"size":2389,"mtime":1612138761454,"results":"66","hashOfConfig":"49"},{"size":339,"mtime":1564794500000,"results":"67","hashOfConfig":"49"},{"size":1590,"mtime":1610399622740,"results":"68","hashOfConfig":"49"},{"size":2100,"mtime":1610397919063,"results":"69","hashOfConfig":"49"},{"size":3823,"mtime":1612204599618,"results":"70","hashOfConfig":"49"},{"size":763,"mtime":1610318432732,"results":"71","hashOfConfig":"49"},{"size":862,"mtime":1611610686377,"results":"72","hashOfConfig":"49"},{"size":569,"mtime":1610353681762,"results":"73","hashOfConfig":"49"},{"size":538,"mtime":1610353498202,"results":"74","hashOfConfig":"49"},{"size":696,"mtime":1610403219806,"results":"75","hashOfConfig":"49"},{"size":2486,"mtime":1610403312581,"results":"76","hashOfConfig":"49"},{"size":918,"mtime":1612039403780,"results":"77","hashOfConfig":"49"},{"size":1711,"mtime":1612038829419,"results":"78","hashOfConfig":"49"},{"size":2416,"mtime":1611606809174,"results":"79","hashOfConfig":"49"},{"size":1397,"mtime":1612043860700,"results":"80","hashOfConfig":"49"},{"size":2360,"mtime":1612040829379,"results":"81","hashOfConfig":"49"},{"size":764,"mtime":1612017028176,"results":"82","hashOfConfig":"49"},{"size":5452,"mtime":1612136488708,"results":"83","hashOfConfig":"49"},{"size":3196,"mtime":1611868793931,"results":"84","hashOfConfig":"49"},{"size":2197,"mtime":1611868955313,"results":"85","hashOfConfig":"49"},{"size":1184,"mtime":1611869000012,"results":"86","hashOfConfig":"49"},{"size":1069,"mtime":1611783087110,"results":"87","hashOfConfig":"49"},{"size":339,"mtime":1564794500000,"results":"88","hashOfConfig":"49"},{"size":2593,"mtime":1612015244498,"results":"89","hashOfConfig":"49"},{"size":644,"mtime":1609622820609,"results":"90","hashOfConfig":"49"},{"size":1137,"mtime":1612043938865,"results":"91","hashOfConfig":"49"},{"size":731,"mtime":1612043226303,"results":"92","hashOfConfig":"49"},{"size":1616,"mtime":1612100436790,"results":"93","hashOfConfig":"49"},{"size":1133,"mtime":1612137682148,"results":"94","hashOfConfig":"49"},{"size":739,"mtime":1612138692616,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"1b02lrw",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"98"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"98"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"98"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"192"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\index.tsx",[],["201","202"],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\layout\\NotFound.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\layout\\ScrollToTop.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",[],["203","204"],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts",["205","206"],"import { ToastContainer } from 'react-toastify';\n// import { id } from 'date-fns/locale';\n// import { Comment } from 'semantic-ui-react';\nimport { observable, action, computed, runInAction, reaction, toJS } from \"mobx\";\nimport { IActivity } from \"../models/activity\";\nimport agent from \"../api/agent\";\nimport { history } from \"../..\";\nimport { toast } from \"react-toastify\";\nimport { RootStore } from \"./rootStore\";\nimport { SyntheticEvent } from \"react\";\nimport { createAttendee, setActivityProps } from \"../common/util/util\";\nimport {\n  HubConnection,\n  HubConnectionBuilder,\n  LogLevel,\n} from \"@microsoft/signalr\";\n\nconst LIMIT = 2;\n\nexport default class ActivityStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.activityRegistry.clear();\n        this.loadActivities();\n      }\n    )\n  }\n\n  @observable activityRegistry = new Map();\n  @observable activity: IActivity | null = null;\n  @observable loadingInitial = false;\n  @observable submitting = false;\n  @observable target = \"\";\n  @observable loading = false;\n  @observable.ref hubConnection: HubConnection | null = null;\n  @observable activityCount = 0;\n  @observable page = 0;\n  @observable predicate = new Map();\n\n  @action setPredicate = (predicate: string, value: string | Date) => {\n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    }\n  }\n\n  @computed get axiosParams() {\n    const params = new URLSearchParams();\n    params.append('limit', String(LIMIT))\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\n    this.predicate.forEach((value, key) => {\n      if(key == 'startDate'){\n        params.append(key, value.toISOString())\n      } else {\n        params.append(key, value)\n      }\n    })\n    return params;\n  }\n\n  @computed get totalPages() {\n    return Math.ceil(this.activityCount / LIMIT);\n  }\n\n  @action setPage = (page: number) => {\n    this.page = page\n  }\n  @action createHubConnection = (activityId: string) => {\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n        accessTokenFactory: () => this.rootStore.commonStore.token!,\n      })\n      .configureLogging(LogLevel.Information)\n      .build();\n\n    this.hubConnection\n      .start()\n      .then(() => console.log(this.hubConnection!.state))\n      .then(() => {\n        console.log(\"Attempting to join group\");\n        if (this.hubConnection!.state === \"Connected\")\n          this.hubConnection!.invoke(\"AddToGroup\", activityId);\n      })\n      .catch((error) => console.log(\"Error establishing connection: \", error));\n\n    this.hubConnection.on(\"ReceiveComment\", (comment) => {\n      runInAction(() => {\n        this.activity!.comments.push(comment);\n      });\n    });\n    this.hubConnection.on(\"Send\", (message) => {\n      // toast.info(message);\n    });\n  };\n\n  @action stopHubConnection = () => {\n    this.hubConnection!.invoke(\"RemoveFromGroup\", this.activity!.id)\n      .then(() => {\n        this.hubConnection?.stop();\n      })\n      .then(() => console.log(\"Connection Stopped\"))\n      .catch((err) => console.log(err));\n  };\n\n  @action addComment = async (values: any) => {\n    values.activityid = this.activity!.id;\n    try {\n      await this.hubConnection!.invoke(\"SendComment\", values);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  @computed get activitiesByDate() {\n    return this.groupActivitiesByDate(\n      Array.from(this.activityRegistry.values())\n    );\n  }\n\n  groupActivitiesByDate(activities: IActivity[]) {\n    const sortedActivities = activities.sort(\n      (a, b) => a.date.getTime() - b.date.getTime()\n    );\n    return Object.entries(\n      sortedActivities.reduce((activities, activity) => {\n        const date = activity.date.toISOString().split(\"T\")[0];\n        activities[date] = activities[date]\n          ? [...activities[date], activity]\n          : [activity];\n        return activities;\n      }, {} as { [key: string]: IActivity[] })\n    );\n  }\n\n  @action loadActivities = async () => {\n    this.loadingInitial = true;\n\n    try {\n      const activitiesEnvelope = await agent.Activities.list(this.axiosParams);\n      const {activities, activityCount} = activitiesEnvelope;\n\n      runInAction(\"loading activities\", () => {\n        activities.forEach((activity) => {\n          setActivityProps(activity, this.rootStore.userStore.user!);\n          this.activityRegistry.set(activity.id, activity);\n        });\n        this.activityCount = activityCount;\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction(\"load activities error\", () => {\n        this.loadingInitial = false;\n      });\n    }\n  };\n\n  @action loadActivity = async (id: string) => {\n    let activity = this.getActivity(id);\n    if (activity) {\n      this.activity = activity;\n      return toJS(activity);\n    } else {\n      this.loadingInitial = true;\n      try {\n        activity = await agent.Activities.details(id);\n        runInAction(\"getting activity\", () => {\n          setActivityProps(activity, this.rootStore.userStore.user!);\n          this.activity = activity;\n          this.activityRegistry.set(activity.id, activity);\n          this.loadingInitial = false;\n        });\n        return activity;\n      } catch (error) {\n        runInAction(\"get activity error\", () => {\n          this.loadingInitial = false;\n        });\n        console.log(error);\n      }\n    }\n  };\n\n  @action clearActivity = () => {\n    this.activity = null;\n  };\n\n  getActivity = (id: string) => {\n    return this.activityRegistry.get(id);\n  };\n\n  @action createActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.create(activity);\n      const attendee = createAttendee(this.rootStore.userStore.user!);\n      attendee.isHost = true;\n      let attendees = [];\n      attendees.push(attendee);\n      activity.attendees = attendees;\n      activity.comments = [];\n      activity.isHost = true;\n      runInAction(\"create activity\", () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction(\"create activity error\", () => {\n        this.submitting = false;\n      });\n      toast.error(\"Problem submitting data\");\n      console.log(error.response);\n    }\n  };\n\n  @action editActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.update(activity);\n      runInAction(\"editing activity\", () => {\n        this.activityRegistry.set(activity.id, activity);\n        this.activity = activity;\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction(\"edit activity error\", () => {\n        this.submitting = false;\n      });\n      toast.error(\"Problem submitting data\");\n      console.log(error);\n    }\n  };\n\n  @action deleteActivity = async (\n    event: SyntheticEvent<HTMLButtonElement>,\n    id: string\n  ) => {\n    this.submitting = true;\n    this.target = event.currentTarget.name;\n    try {\n      await agent.Activities.delete(id);\n      runInAction(\"deleting activity\", () => {\n        this.activityRegistry.delete(id);\n        this.submitting = false;\n        this.target = \"\";\n      });\n    } catch (error) {\n      runInAction(\"delete activity error\", () => {\n        this.submitting = false;\n        this.target = \"\";\n      });\n      console.log(error);\n    }\n  };\n\n  @action attendActivity = async () => {\n    const attendee = createAttendee(this.rootStore.userStore.user!);\n    this.loading = true;\n    try {\n      await agent.Activities.attend(this.activity!.id);\n      runInAction(() => {\n        if (this.activity) {\n          this.activity.attendees.push(attendee);\n          this.activity.isGoing = true;\n          this.activityRegistry.set(this.activity.id, this.activity);\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error(\"Problem signing up to activity\");\n    }\n  };\n\n  @action cancelAttendance = async () => {\n    this.loading = true;\n    try {\n      await agent.Activities.unattend(this.activity!.id);\n      runInAction(() => {\n        if (this.activity) {\n          this.activity.attendees = this.activity.attendees.filter(\n            (a) => a.username !== this.rootStore.userStore.user!.username\n          );\n          this.activity.isGoing = false;\n          this.activityRegistry.set(this.activity.id, this.activity);\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error(\"Problem cancelling attendace\");\n    }\n  };\n}\n","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\models\\activity.ts",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\form\\TextAreaInput.tsx",[],["207","208"],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\form\\SelectInput.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\util\\util.ts",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\nav\\NavBar.tsx",["209"],"import React, { useContext } from \"react\";\nimport { Menu, Container, Button, Dropdown, Image } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\n\nconst NavBar: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {isLoggedIn, user, logout} = rootStore.userStore;\n  return (\n    <Menu fixed='top' inverted>\n      <Container>\n        <Menu.Item header as={NavLink} exact to='/'>\n          <img src='/assets/logo.png' alt='logo' style={{ marginRight: 10 }} />\n          Reactivities\n        </Menu.Item>\n        <Menu.Item name='Activities' as={NavLink} to='/activities' />\n        <Menu.Item>\n          <Button\n            as={NavLink}\n            to='/createActivity'\n            positive\n            content='Create Activity'\n          />\n        </Menu.Item>\n        {user && (\n          <Menu.Item position='right'>\n            <Image avatar spaced='right' src={user.image || \"/assets/user.png\"} />\n            <Dropdown pointing='top left' text={user.displayName}>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  as={Link}\n                  to={`/profile/${user.username}`}\n                  text='My profile'\n                  icon='user'\n                />\n                <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n              </Dropdown.Menu>\n            </Dropdown>\n          </Menu.Item>\n        )}\n      </Container>\n    </Menu>\n  );\n};\n\nexport default observer(NavBar);\n","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\form\\DateInput.tsx",[],["210","211"],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",["212"],"import React, { useState, useContext, useEffect } from 'react';\nimport { Segment, Form, Button, Grid } from 'semantic-ui-react';\nimport { ActivityFormValues } from '../../../app/models/activity';\nimport { v4 as uuid } from 'uuid';\nimport ActivityStore from '../../../app/stores/activityStore';\nimport { observer } from 'mobx-react-lite';\nimport { RouteComponentProps } from 'react-router';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport TextInput from '../../../app/common/form/TextInput';\nimport TextAreaInput from '../../../app/common/form/TextAreaInput';\nimport SelectInput from '../../../app/common/form/SelectInput';\nimport DateInput from '../../../app/common/form/DateInput';\nimport { category } from '../../../app/common/options/categoryOptions';\nimport { combineDateAndTime } from '../../../app/common/util/util';\nimport {\n  combineValidators,\n  isRequired,\n  composeValidators,\n  hasLengthGreaterThan\n} from 'revalidate';\nimport { RootStoreContext } from '../../../app/stores/rootStore';\n\nconst validate = combineValidators({\n  title: isRequired({ message: 'The event title is required' }),\n  category: isRequired('Category'),\n  description: composeValidators(\n    isRequired('Description'),\n    hasLengthGreaterThan(4)({\n      message: 'Description needs to be at least 5 characters'\n    })\n  )(),\n  city: isRequired('City'),\n  venue: isRequired('Venue'),\n  date: isRequired('Date'),\n  time: isRequired('Time')\n});\n\ninterface DetailParams {\n  id: string;\n}\n\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    createActivity,\n    editActivity,\n    submitting,\n    loadActivity\n  } = rootStore.activityStore;\n\n  const [activity, setActivity] = useState(new ActivityFormValues());\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (match.params.id) {\n      setLoading(true);\n      loadActivity(match.params.id)\n        .then(activity => {\n          setActivity(new ActivityFormValues(activity));\n        })\n        .finally(() => setLoading(false));\n    }\n  }, [loadActivity, match.params.id]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    const dateAndTime = combineDateAndTime(values.date, values.time);\n    const { date, time, ...activity } = values;\n    activity.date = dateAndTime;\n    if (!activity.id) {\n      let newActivity = {\n        ...activity,\n        id: uuid()\n      };\n      createActivity(newActivity);\n    } else {\n      editActivity(activity);\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <Segment clearing>\n          <FinalForm\n            validate={validate}\n            initialValues={activity}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit} loading={loading}>\n                <Field\n                  name='title'\n                  placeholder='Title'\n                  value={activity.title}\n                  component={TextInput}\n                />\n                <Field\n                  name='description'\n                  placeholder='Description'\n                  rows={3}\n                  value={activity.description}\n                  component={TextAreaInput}\n                />\n                <Field\n                  component={SelectInput}\n                  options={category}\n                  name='category'\n                  placeholder='Category'\n                  value={activity.category}\n                />\n                <Form.Group widths='equal'>\n                  <Field\n                    component={DateInput}\n                    name='date'\n                    date={true}\n                    placeholder='Date'\n                    value={activity.date}\n                  />\n                  <Field\n                    component={DateInput}\n                    name='time'\n                    time={true}\n                    placeholder='Time'\n                    value={activity.time}\n                  />\n                </Form.Group>\n\n                <Field\n                  component={TextInput}\n                  name='city'\n                  placeholder='City'\n                  value={activity.city}\n                />\n                <Field\n                  component={TextInput}\n                  name='venue'\n                  placeholder='Venue'\n                  value={activity.venue}\n                />\n                <Button\n                  loading={submitting}\n                  disabled={loading || invalid || pristine}\n                  floated='right'\n                  positive\n                  type='submit'\n                  content='Submit'\n                />\n                <Button\n                  onClick={\n                    activity.id\n                      ? () => history.push(`/activities/${activity.id}`)\n                      : () => history.push('/activities')\n                  }\n                  disabled={loading}\n                  floated='right'\n                  type='button'\n                  content='Cancel'\n                />\n              </Form>\n            )}\n          />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityForm);\n","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\layout\\App.tsx",[],["213","214"],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],["215","216"],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\stores\\userStore.ts",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\user\\LoginForm.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\api\\agent.ts",["217"],"import { IPhoto } from \"./../models/profile\";\nimport axios, { AxiosResponse } from \"axios\";\nimport { IActivitisEnvelope, IActivity } from \"../models/activity\";\nimport { history } from \"../..\";\nimport { toast } from \"react-toastify\";\nimport { IUser, IUserFormValues } from \"../models/user\";\nimport { IProfile } from \"../models/profile\";\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(\n  (config) => {\n    const token = window.localStorage.getItem(\"jwt\");\n    if (token) config.headers.Authorization = `Bearer ${token}`;\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(undefined, (error) => {\n  if (error.message === \"Network Error\" && !error.response) {\n    toast.error(\"Network error - make sure API is running!\");\n  }\n  const { status, data, config, headers } = error.response;\n  if (status === 404) {\n    history.push(\"/notfound\");\n  }\n  if (\n    status === 401 &&\n    headers[\"www-authenticate\"] ===\n      'Bearer error=\"invalid_token\", error_description=\"The token expired\"'\n  ) {\n    window.localStorage.removeItem(\"jwt\");\n    history.push(\"/\");\n    toast.info(\"Your session has expired, please login again\");\n  }\n  if (\n    status === 400 &&\n    config.method === \"get\" &&\n    data.errors.hasOwnProperty(\"id\")\n  ) {\n    history.push(\"/notfound\");\n  }\n  if (status === 500) {\n    toast.error(\"Server error - check the terminal for more info!\");\n  }\n  throw error.response;\n});\n\nconst responseBody = (response: AxiosResponse) => response.data;\nconst requests = {\n  get: (url: string) => axios.get(url).then(responseBody),\n  post: (url: string, body: {}) =>\n    axios.post(url, body).then(responseBody),\n  put: (url: string, body: {}) =>\n    axios.put(url, body).then(responseBody),\n  del: (url: string) => axios.delete(url).then(responseBody),\n  postForm: (url: string, file: Blob) => {\n    let formData = new FormData();\n    formData.append(\"File\", file);\n    return axios\n      .post(url, formData, {\n        headers: { \"Content-type\": \"multipart/form-data\" },\n      })\n      .then(responseBody);\n  },\n};\n\nconst Activities = {\n  list: (params: URLSearchParams): Promise<IActivitisEnvelope> =>\n    axios\n      .get(\"/activities\", { params: params })\n      .then(responseBody),\n  details: (id: string) => requests.get(`/activities/${id}`),\n  create: (activity: IActivity) => requests.post(\"/activities\", activity),\n  update: (activity: IActivity) =>\n    requests.put(`/activities/${activity.id}`, activity),\n  delete: (id: string) => requests.del(`/activities/${id}`),\n  attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\n  unattend: (id: string) => requests.del(`/activities/${id}/attend`),\n};\n\nconst User = {\n  current: (): Promise<IUser> => requests.get(\"/user\"),\n  login: (user: IUserFormValues): Promise<IUser> =>\n    requests.post(\"/user/login\", user),\n  register: (user: IUserFormValues): Promise<IUser> =>\n    requests.post(\"/user/register\", user),\n};\n\nconst Profiles = {\n  get: (username: string): Promise<IProfile> =>\n    requests.get(`/profiles/${username}`),\n  uploadPhoto: (photo: Blob): Promise<IPhoto> =>\n    requests.postForm(`/photos`, photo),\n  setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n  deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n  follow: (username: string) =>\n    requests.post(`/profiles/${username}/follow`, {}),\n  unfollow: (username: string) => requests.del(`/profiles/${username}/follow`),\n  listFollowings: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/follow?predicate=${predicate}`),\n  listActivities: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/activities?predicate=${predicate}`),\n};\n\nexport default {\n  Activities,\n  User,\n  Profiles,\n};\n","C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\stores\\commonStore.ts",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\stores\\rootStore.ts",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\stores\\modelStore.ts",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\modals\\ModalContainer.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\form\\ErrorMessage.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\user\\RegisterForm.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItemAttendees.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedSidebar.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedHeader.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\profiles\\ProfilePage.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\profiles\\ProfileHeader.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\profiles\\ProfileContent.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\stores\\profileStore.ts",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\profiles\\ProfilePhotos.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\photoUpload\\PhotoUploadWidget.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\photoUpload\\PhotoWidgetDropzone.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\photoUpload\\PhotoWidgetCropper.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\options\\categoryOptions.ts",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\common\\form\\TextInput.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\profiles\\ProfileFollowings.tsx",[],["218","219"],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\profiles\\ProfileCard.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityFilters.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItemPlaceholder.tsx",[],"C:\\Users\\kashif\\Documents\\Personal\\dotNetCore_React\\Reactivities\\client-app\\src\\app\\layout\\PrivateRoute.tsx",[],{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","replacedBy":"223"},{"ruleId":"220","replacedBy":"224"},{"ruleId":"222","replacedBy":"225"},{"ruleId":"226","severity":1,"message":"227","line":1,"column":10,"nodeType":"228","messageId":"229","endLine":1,"endColumn":24},{"ruleId":"230","severity":1,"message":"231","line":58,"column":14,"nodeType":"232","messageId":"233","endLine":58,"endColumn":16},{"ruleId":"220","replacedBy":"234"},{"ruleId":"222","replacedBy":"235"},{"ruleId":"226","severity":1,"message":"236","line":9,"column":10,"nodeType":"228","messageId":"229","endLine":9,"endColumn":20},{"ruleId":"220","replacedBy":"237"},{"ruleId":"222","replacedBy":"238"},{"ruleId":"226","severity":1,"message":"239","line":5,"column":8,"nodeType":"228","messageId":"229","endLine":5,"endColumn":21},{"ruleId":"220","replacedBy":"240"},{"ruleId":"222","replacedBy":"241"},{"ruleId":"220","replacedBy":"242"},{"ruleId":"222","replacedBy":"243"},{"ruleId":"244","severity":1,"message":"245","line":109,"column":1,"nodeType":"246","endLine":113,"endColumn":3},{"ruleId":"220","replacedBy":"247"},{"ruleId":"222","replacedBy":"248"},"no-native-reassign",["249"],"no-negated-in-lhs",["250"],["249"],["250"],"@typescript-eslint/no-unused-vars","'ToastContainer' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["249"],["250"],"'isLoggedIn' is assigned a value but never used.",["249"],["250"],"'ActivityStore' is defined but never used.",["249"],["250"],["249"],["250"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["249"],["250"],"no-global-assign","no-unsafe-negation"]